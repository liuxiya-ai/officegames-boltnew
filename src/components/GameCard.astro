---
export interface Game {
	id: string;
	name: string;
	description: string;
	image: string;
	duration: string;
	playerCount: string[];
	gameType: string[];
	setting: string[];
	techRequirement: string[];
	category: string[];
	tags: string[];
	link: string;
	featured?: boolean;
}

export interface Props {
	game: Game;
}

const { game } = Astro.props;

// Simple tag color assignment based on content (for display only)
const getTagColor = (tag: string) => {
	if (tag.includes('min') || tag.toLowerCase().includes('quick')) return 'bg-green-100 text-green-800';
	if (tag.toLowerCase().includes('team') || tag.toLowerCase().includes('player') || tag.toLowerCase().includes('individual')) return 'bg-blue-100 text-blue-800';
	if (tag.toLowerCase().includes('creative') || tag.toLowerCase().includes('brain')) return 'bg-purple-100 text-purple-800';
	if (tag.toLowerCase().includes('strategy')) return 'bg-yellow-100 text-yellow-800';
	if (tag.toLowerCase().includes('interactive') || tag.toLowerCase().includes('social')) return 'bg-pink-100 text-pink-800';
	return 'bg-gray-100 text-gray-800';
};
---

<div class="game-card" data-game-id={game.id}>
	<div class="card-header">
		<img src={game.image} alt={game.name} class="game-image" loading="lazy" />
		{game.featured && <div class="featured-badge">‚≠ê Featured</div>}
	</div>
	
	<div class="card-content">
		<h3 class="game-title">{game.name}</h3>
		<p class="game-description">{game.description}</p>
		
		<div class="game-tags">
			{game.tags.map((tag, index) => (
				<span class={`tag ${getTagColor(tag)}`} key={index}>
					{tag}
				</span>
			))}
		</div>
		
		<div class="card-footer">
			<a href={game.link} target="_blank" rel="noopener noreferrer" class="play-button">
				<svg class="play-icon" fill="currentColor" viewBox="0 0 20 20">
					<path d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z"/>
				</svg>
				Play Now
			</a>
		</div>
	</div>
</div>

<style>
	.game-card {
		background: white;
		border-radius: 16px;
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
		overflow: hidden;
		transition: all 0.3s ease;
		position: relative;
		height: 100%;
		display: flex;
		flex-direction: column;
	}

	.game-card:hover {
		transform: translateY(-4px);
		box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
	}

	.card-header {
		position: relative;
		height: 200px;
		overflow: hidden;
	}

	.game-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		transition: transform 0.3s ease;
	}

	.game-card:hover .game-image {
		transform: scale(1.05);
	}

	.featured-badge {
		position: absolute;
		top: 0.75rem;
		right: 0.75rem;
		background: linear-gradient(135deg, #fbbf24, #f59e0b);
		color: white;
		padding: 0.25rem 0.75rem;
		border-radius: 20px;
		font-size: 0.75rem;
		font-weight: 600;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	.card-content {
		padding: 1.5rem;
		flex: 1;
		display: flex;
		flex-direction: column;
	}

	.game-title {
		font-size: 1.25rem;
		font-weight: 600;
		color: #1e293b;
		margin-bottom: 0.75rem;
		line-height: 1.3;
	}

	.game-description {
		color: #64748b;
		font-size: 0.95rem;
		line-height: 1.5;
		margin-bottom: 1rem;
		flex: 1;
	}

	.game-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
		margin-bottom: 1.5rem;
	}

	.tag {
		padding: 0.25rem 0.75rem;
		border-radius: 20px;
		font-size: 0.75rem;
		font-weight: 500;
		white-space: nowrap;
	}

	.type-tag {
		background: #f1f5f9;
		color: #475569;
	}

	.card-footer {
		margin-top: auto;
	}

	.play-button {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 100%;
		padding: 0.875rem 1.5rem;
		background: linear-gradient(135deg, #3b82f6, #1d4ed8);
		color: white;
		text-decoration: none;
		border-radius: 12px;
		font-weight: 500;
		font-size: 0.95rem;
		transition: all 0.2s ease;
		gap: 0.5rem;
	}

	.play-button:hover {
		background: linear-gradient(135deg, #2563eb, #1e40af);
		transform: translateY(-1px);
		box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
	}

	.play-icon {
		width: 1.25rem;
		height: 1.25rem;
	}

	/* Utility classes for tags */
	.bg-green-100 { background-color: #dcfce7; }
	.text-green-800 { color: #166534; }
	.bg-blue-100 { background-color: #dbeafe; }
	.text-blue-800 { color: #1e40af; }
	.bg-yellow-100 { background-color: #fef3c7; }
	.text-yellow-800 { color: #92400e; }
	.bg-red-100 { background-color: #fee2e2; }
	.text-red-800 { color: #991b1b; }
	.bg-purple-100 { background-color: #f3e8ff; }
	.text-purple-800 { color: #6b21a8; }
	.bg-indigo-100 { background-color: #e0e7ff; }
	.text-indigo-800 { color: #3730a3; }
	.bg-pink-100 { background-color: #fce7f3; }
	.text-pink-800 { color: #9d174d; }
	.bg-orange-100 { background-color: #fed7aa; }
	.text-orange-800 { color: #9a3412; }
	.bg-gray-100 { background-color: #f3f4f6; }
	.text-gray-800 { color: #1f2937; }
</style>